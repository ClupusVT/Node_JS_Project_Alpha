HTTP/2 200 OK
Date: Tue, 16 Jan 2024 07:55:28 GMT
Content-Type: application/json
Content-Length: 35813
X-Amzn-Requestid: 271fa485-2da2-4ced-8093-dbc013fac4df
Access-Control-Allow-Origin: *
X-Amz-Apigw-Id: Rn1xhGE1iYcEjRw=
X-Amzn-Trace-Id: Root=1-65a6366f-1811a7730948178267ef4a68

{"errorMessage":"failed to save service graph: {Name:ABCD Services:[{Name:robo-check Parameters:{ExecutionProfileName: Mandatory:0}} {Name:npanxx-check Parameters:{ExecutionProfileName: Mandatory:0}} {Name:fraud-scoring-std1 Parameters:{ExecutionProfileName: Mandatory:0}}] Description:default service graph APIPaths:[]} as service \"fraud-scoring-std1\" is not defined map[call-treatment-std:{Name: Type:transform Datastore: Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description:Adds or modifies the display name in response based on scoring result; any scoring service is a required precondition. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} callerid-spoofing-check:{Name: Type:transform Datastore: Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:('%feature.numberingPlan.orig.isValid' == '0' \u0026\u0026 '%feature.numberingPlan.orig.error' == '') Output:is-invalid-number-length} {Criteria:[] Expression:('%feature.numberingPlan.numberMatched' == '1') Output:is-calling-and-called-same} {Criteria:[] Expression:('%feature.numberingPlan.orig.error' == 'notNumber') Output:is-anonymous}]} PostInvProc:{Extractors:[]} Features:[] Description:Checks for caller ID spoofing, if matches are found, contributes to increase nuisance Scores for the call Sku:NUISANCE1 AttributesForKeys:[] ScoringParameter: KeyProfileName:} fraud-scoring-adv:{Name: Type:scoring Datastore: Tn: Modelname:fraud-model-adv Preconditions:['$in-subscriber-opt-out' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Passed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-passed-AB} {Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Failed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-failed-AB} {Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-invalid-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-valid-npanxx}]} PostInvProc:{Extractors:[]} Features:[] Description:Computes and returns a more comprehensive fraud score for the call; suggested precondition services: npanxx-check, irsf-check, msrn-check, sti-verify, tenant-allow-check, tenant-deny-check, tenant-dno-check, tenant-fraud-check. Sku:FRAUD2 AttributesForKeys:[] ScoringParameter:fraud KeyProfileName:} fraud-scoring-ent:{Name: Type:scoring Datastore: Tn: Modelname:fraud-model-ent Preconditions:['$in-subscriber-opt-out' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-invalid-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-valid-npanxx}]} PostInvProc:{Extractors:[]} Features:[] Description:Computes and returns a more comprehensive fraud score for enterprise use case Sku:ENT1 AttributesForKeys:[] ScoringParameter:fraud KeyProfileName:} fraud-scoring-std:{Name: Type:scoring Datastore: Tn: Modelname:fraud-model-std Preconditions:['$in-subscriber-opt-out' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Passed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-passed-AB} {Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Failed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-failed-AB} {Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-invalid-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-valid-npanxx}]} PostInvProc:{Extractors:[]} Features:[] Description:Computes and returns a fraud score for the call; suggested precondition services: npanxx-check, irsf-check, msrn-check, sti-verify. Sku:FRAUD1 AttributesForKeys:[] ScoringParameter:fraud KeyProfileName:} global-dno-check:{Name: Type:datastore Datastore:global-dno Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:is-global-dno Value:}] Description:Checks whether the calling number is present in the global DNO list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} honeypot-check:{Name: Type:datastore Datastore:honeypot Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:is-honeypot Value:}] Description:Checks the calling number against a list of suspected robocallers derived by Ribbon Analytics and based on calls coming into the Ribbon honeypot; recommended if and only if Nuisance Scoring service is enabled. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} internal:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:http://internal-prod046-sti-prod-elb-2126602237.us-east-2.elb.amazonaws.com:8443/stir/v1/signing Headers:[{Name:Authorization Value:}] Timeout:1000} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:tenant Value:%req.query.tenant}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description: Sku:STSH AttributesForKeys:[] ScoringParameter: KeyProfileName:} irsf-check:{Name: Type:datastore Datastore:prism-irsf Tn:%req.body.serviceIdentity.to.0 Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:is-prism-irsf Value:}] Description:Checks the called number against a commercial IRSF list; recommended if an only if a Fraud Scoring service is enabled. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} is-autodial-suspect:{Name: Type:datastore Datastore:autodial-suspect Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:'%req.body.serviceIdentity.from' Output:autodial-callingpartykey} {Criteria:['$autodial-callingpartykey' == ''] Expression:'%req.body.verificationRequest.orig.tn' Output:autodial-callingpartykey} {Criteria:[] Expression:'%req.body.serviceIdentity.context.autodialer' Output:autodial-context} {Criteria:['$autodial-context' == ''] Expression:'%req.body.verificationRequest.context.autodialer' Output:autodial-context}]} PostInvProc:{Extractors:[]} Features:[{Name:is-autodial-suspect Value:}] Description:checks for autodial against tenant uploaded autodial suspect entries. Sku: AttributesForKeys:[{Source:$autodial-callingpartykey Key:callingparty} {Source:$autodial-context Key:context}] ScoringParameter: KeyProfileName:} is-neighbor-spoofing-suspect:{Name: Type:datastore Datastore:neighbor-spoofing-suspect Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:'%req.body.serviceIdentity.from' Output:neighbor-spoofing-suspect-callingpartykey} {Criteria:['$neighbor-spoofing-suspect-callingpartykey' == ''] Expression:'%req.body.verificationRequest.orig.tn' Output:neighbor-spoofing-suspect-callingpartykey} {Criteria:[] Expression:'%req.body.serviceIdentity.context.neighborspoofer' Output:neighbor-spoofing-suspect-context} {Criteria:['$neighbor-spoofing-suspect-context' == ''] Expression:'%req.body.verificationRequest.context.neighborspoofer' Output:neighbor-spoofing-suspect-context}]} PostInvProc:{Extractors:[]} Features:[{Name:is-neighbor-spoofing-suspect Value:}] Description:checks for neighbor spoofing against tenant uploaded neighbor spoofing suspect entries. Sku: AttributesForKeys:[{Source:$neighbor-spoofing-suspect-callingpartykey Key:callingparty-trim-0-4} {Source:$neighbor-spoofing-suspect-context Key:context}] ScoringParameter: KeyProfileName:} is-spoof-suspect:{Name: Type:datastore Datastore:spoof-suspect Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:'%req.body.serviceIdentity.from' Output:spoof-callingpartykey} {Criteria:['$spoof-callingpartykey' == ''] Expression:'%req.body.verificationRequest.orig.tn' Output:spoof-callingpartykey} {Criteria:[] Expression:'%req.body.serviceIdentity.context.spoofer' Output:spoof-context} {Criteria:['$spoof-context' == ''] Expression:'%req.body.verificationRequest.context.spoofer' Output:spoof-context}]} PostInvProc:{Extractors:[]} Features:[{Name:is-spoof-suspect Value:}] Description:checks for spoof against tenant uploaded spoof suspect entries. Sku: AttributesForKeys:[{Source:$spoof-callingpartykey Key:callingparty} {Source:$spoof-context Key:context}] ScoringParameter: KeyProfileName:} is-tdos-suspect:{Name: Type:datastore Datastore:tdos-suspect Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:'%req.body.serviceIdentity.to.0' Output:tdos-calledpartykey} {Criteria:['$tdos-calledpartykey' == ''] Expression:'%req.body.verificationRequest.dest.tn.0' Output:tdos-calledpartykey} {Criteria:[] Expression:'%req.body.serviceIdentity.context.tdos' Output:tdos-context} {Criteria:['$tdos-context' == ''] Expression:'%req.body.verificationRequest.context.tdos' Output:tdos-context}]} PostInvProc:{Extractors:[]} Features:[{Name:is-tdos-suspect Value:}] Description:checks for tdos against tenant uploaded tdos suspect entries. Sku: AttributesForKeys:[{Source:$tdos-calledpartykey Key:calledparty} {Source:$tdos-context Key:context}] ScoringParameter: KeyProfileName:} is-tdos-suspect-ent:{Name: Type:datastore Datastore:tdos-suspect-ent Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:'%req.body.serviceIdentity.from' Output:tdos-callingpartykey} {Criteria:['$tdos-callingpartykey' == ''] Expression:'%req.body.verificationRequest.orig.tn' Output:tdos-callingpartykey} {Criteria:[] Expression:'%req.body.serviceIdentity.to.0' Output:tdos-calledpartykey} {Criteria:['$tdos-calledpartykey' == ''] Expression:'%req.body.verificationRequest.dest.tn.0' Output:tdos-calledpartykey}]} PostInvProc:{Extractors:[]} Features:[{Name:is-tdos-suspect Value:}] Description:checks for tdos against tenant uploaded tdos entries. Sku: AttributesForKeys:[{Source:$tdos-callingpartykey Key:callingparty-trim-0-4} {Source:$tdos-calledpartykey Key:calledparty}] ScoringParameter: KeyProfileName:} is-tollfree-suspect-ent:{Name: Type:datastore Datastore:tollfree-suspect-ent Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:'%req.body.serviceIdentity.from' Output:tollfree-callingpartykey} {Criteria:['$tollfree-callingpartykey' == ''] Expression:'%req.body.verificationRequest.orig.tn' Output:tollfree-callingpartykey} {Criteria:[] Expression:'%req.body.serviceIdentity.to.0' Output:tollfree-calledpartykey} {Criteria:['$tollfree-calledpartykey' == ''] Expression:'%req.body.verificationRequest.dest.tn.0' Output:tollfree-calledpartykey}]} PostInvProc:{Extractors:[]} Features:[{Name:is-tollfree-suspect Value:}] Description:checks for tdos against tenant uploaded tdos entries. Sku: AttributesForKeys:[{Source:$tollfree-callingpartykey Key:callingparty-trim-0-4} {Source:$tollfree-calledpartykey Key:calledparty}] ScoringParameter: KeyProfileName:} msrn-check:{Name: Type:datastore Datastore:prism-msrn Tn:%req.body.serviceIdentity.from Modelname: Preconditions:['$is-prism-irsf' != ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:is-prism-msrn  Value:}] Description:Checks the called number against a commercial MSRN list; recommended if an only if a Fraud Scoring service is enabled. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} npanxx-check:{Name: Type:nanp Datastore: Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:is-valid-npanxx Value:}] Description:Validates the calling number against the NANP LERG6 assigned phone number blocks for North America; recommended if and only if any Scoring service is enabled. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:default-key-exception-list} nuisance-scoring-adv:{Name: Type:scoring Datastore: Tn: Modelname:nuisance-model-adv Preconditions:['$in-subscriber-opt-out' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Passed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-passed-AB} {Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Failed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-failed-AB} {Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-invalid-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-valid-npanxx}]} PostInvProc:{Extractors:[]} Features:[] Description:Computes and returns a nuisance score for the call; suggested precondition services: npanxx-check, robo-check, sti-verify. Sku:NUISANCE2 AttributesForKeys:[] ScoringParameter:nuisance KeyProfileName:} nuisance-scoring-ent:{Name: Type:scoring Datastore: Tn: Modelname:nuisance-model-ent Preconditions:['$in-subscriber-opt-out' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-invalid-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-valid-npanxx}]} PostInvProc:{Extractors:[]} Features:[] Description:Computes and returns a more comprehensive nuisance score for enterprise use case Sku:ENT1 AttributesForKeys:[] ScoringParameter:nuisance KeyProfileName:} nuisance-scoring-std:{Name: Type:scoring Datastore: Tn: Modelname:nuisance-model-std Preconditions:['$in-subscriber-opt-out' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[{Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Passed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-passed-AB} {Criteria:[] Expression:('%req.body.serviceIdentity.verstat' == 'TN-Validation-Failed' \u0026\u0026 ('%req.body.serviceIdentity.attest' == 'A' || '%req.body.serviceIdentity.attest' == 'B')) Output:verify-failed-AB} {Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-invalid-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.serviceIdentity.from', '1') Output:is-valid-npanxx}]} PostInvProc:{Extractors:[]} Features:[] Description:Computes and returns a nuisance score for the call; suggested precondition services: npanxx-check, robo-check, sti-verify. Sku:NUISANCE1 AttributesForKeys:[] ScoringParameter:nuisance KeyProfileName:} numbering-plan-check:{Name: Type:internal Datastore: Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:numberingPlan Value:}] Description:verifies whether a phone number matches a valid pattern Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ani:{Name:op-ani Type:datastore Datastore:op-ani Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the ANI to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ani-trim3:{Name:op-ani-trim3 Type:datastore Datastore:op-ani-trim3 Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the ANI prefix of length 8 to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ani-trim4:{Name:op-ani-trim4 Type:datastore Datastore:op-ani-trim4 Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the ANI prefix of length 7 to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ani-trim7:{Name:op-ani-trim7 Type:datastore Datastore:op-ani-trim7 Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the ANI prefix of length 4 to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ani8:{Name:op-ani8 Type:datastore Datastore:op-ani8 Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the ANI prefix of length 8 to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ctx:{Name:op-ctx Type:datastore Datastore:op-ctx Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the incoming context to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ctx-ani:{Name:op-ctx-ani Type:datastore Datastore:op-ctx-ani Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the context and ANI to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ctx-ani8:{Name:op-ctx-ani8 Type:datastore Datastore:op-ctx-ani8 Tn: Modelname: Preconditions:['$origPolicy' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:'%resp.body.profileid' Output:origPolicy_profileid} {Criteria:[] Expression:'%resp.body.attest' Output:origPolicy_attest} {Criteria:[] Expression:'%resp.body.origid' Output:origPolicy_origid}]} Features:[{Name:origPolicy Value:}] Description:uses the context and ANI prefix of length 8 to retrieve parameters from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-ctx-pool:{Name:op-ctx-pool Type:datastore Datastore:op-ctx-pool Tn: Modelname: Preconditions:['$op-context' == ''] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:op-context Value:}] Description:retrieves context pool from a customer-provided list Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} op-response-del:{Name: Type:response Datastore: Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[{Criteria:[] Operation:delete Path:profileid Value:} {Criteria:[] Operation:delete Path:attest Value:} {Criteria:[] Operation:delete Path:origid Value:}]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description:deletes orig policy response from final response body Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} robo-check:{Name: Type:datastore Datastore:nomorobo Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:is-nomorobo Value:}] Description:Checks the calling number against a commercial robocaller list for North America; recommended if and only if Nuisance Scoring service is enabled. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} sti-internal:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:http://internal-prod046-sti-prod-elb-2126602237.us-east-2.elb.amazonaws.com:8443/stir/v1/verification Headers:[] Timeout:1000} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:tenant Value:%req.query.tenant}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:startswith('%resp.body.verificationResponse.verstat','TN-Validation-Passed') \u0026\u0026 (startswith('%req.body.verificationRequest.attest','A') || startswith('%req.body.verificationRequest.attest','B')) Output:sti-verify-passed-AB} {Criteria:[] Expression:startswith('%resp.body.verificationResponse.verstat','TN-Validation-Failed') \u0026\u0026 (startswith('%req.body.verificationRequest.attest','A') || startswith('%req.body.verificationRequest.attest','B')) Output:sti-verify-failed-AB} {Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.verificationRequest.orig.tn', '1') Output:is-invalid-sti-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.verificationRequest.orig.tn', '1') Output:is-valid-sti-npanxx}]} Features:[] Description: Sku:STSH AttributesForKeys:[] ScoringParameter: KeyProfileName:} sti-op-signing:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:http://internal-prod046-sti-prod-elb-2126602237.us-east-2.elb.amazonaws.com:9990/stir/v1/signing Headers:[] Timeout:300} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:tenant Value:$tenantId} {Name:profileid Value:$origPolicy_profileid} {Name:attest Value:$origPolicy_attest} {Name:origid Value:$origPolicy_origid}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description: Sku:STSH AttributesForKeys:[] ScoringParameter: KeyProfileName:} sti-signing:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:http://internal-prod046-sti-prod-elb-2126602237.us-east-2.elb.amazonaws.com:9990/stir/v1/signing Headers:[] Timeout:300} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:tenant Value:$tenantId}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description: Sku:STSH AttributesForKeys:[] ScoringParameter: KeyProfileName:} sti-verify:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:http://internal-prod046-sti-prod-elb-2126602237.us-east-2.elb.amazonaws.com:9990/stir/v1/verification Headers:[] Timeout:1000} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:tenant Value:$tenantId}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[{Criteria:[] Expression:startswith('%resp.body.verificationResponse.verstat','TN-Validation-Passed') \u0026\u0026 (startswith('%req.body.verificationRequest.attest','A') || startswith('%req.body.verificationRequest.attest','B')) Output:sti-verify-passed-AB} {Criteria:[] Expression:startswith('%resp.body.verificationResponse.verstat','TN-Validation-Failed') \u0026\u0026 (startswith('%req.body.verificationRequest.attest','A') || startswith('%req.body.verificationRequest.attest','B')) Output:sti-verify-failed-AB} {Criteria:[] Expression:startswith('$npanxx-check', '0') \u0026\u0026 startswith('%req.body.verificationRequest.orig.tn', '1') Output:is-invalid-sti-npanxx} {Criteria:[] Expression:(startswith('$npanxx-check', '8') || startswith('$npanxx-check', '7')) \u0026\u0026 startswith('%req.body.verificationRequest.orig.tn', '1') Output:is-valid-sti-npanxx}]} Features:[] Description:Validates the provided STIR/SHAKEN signature and returns the verstat result; required if customer uses Identity Hub for STIR/SHAKEN verification. Sku:STSH AttributesForKeys:[] ScoringParameter: KeyProfileName:} subscriber-allow-check:{Name: Type:datastore Datastore:subscriber-allow Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-subscriber-allow Value:}] Description:Checks the calling and called numbers against customer-uploaded allowed numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their allowed numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} subscriber-deny-check:{Name: Type:datastore Datastore:subscriber-deny Tn: Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-subscriber-deny Value:}] Description:Checks the calling and called numbers against customer-uploaded denied numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their denied numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} subscriber-opt-out-check:{Name: Type:datastore Datastore:subscriber-opt-out Tn:%req.body.serviceIdentity.to.0 Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-subscriber-opt-out Value:}] Description:service check to opt out for scoring for certain susbscribers Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} tenant-allow-check:{Name: Type:datastore Datastore:tenant-allow Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-tenant-allow Value:}] Description:Checks the calling number against customer-uploaded allowed numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their allowed numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} tenant-deny-check:{Name: Type:datastore Datastore:tenant-deny Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-tenant-deny Value:}] Description:Checks the calling number against customer-uploaded denied numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their denied numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} tenant-dno-check:{Name: Type:datastore Datastore:tenant-dno Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-tenant-dno Value:}] Description:Checks the calling number against customer-uploaded Does-Not-Originate numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their DNO numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} tenant-fraud-check:{Name: Type:datastore Datastore:tenant-fraud Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-tenant-fraud Value:}] Description:Checks the calling number against customer-uploaded fraud numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their fraud numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} tenant-wangiri-check:{Name: Type:datastore Datastore:tenant-wangiri Tn:%req.body.serviceIdentity.from Modelname: Preconditions:[] Connection:{URL: Headers:[] Timeout:0} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[{Name:in-tenant-wangiri Value:}] Description:Checks the calling number against customer-uploaded wangiri numbers; recommended if an only if the Fraud Scoring Advanced service is enabled and customer will upload their wangiri numbers. Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:} tollfree-route:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:https://prod046-tollfree.poc.rbbnidhub.com/tollfree/v1/route Headers:[{Name:Authorization Value:}] Timeout:1000} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description:Returns tollfree routing information that includes responsible organization; Limited to those participating with Ribbon in POC testing Sku:TFREE1 AttributesForKeys:[] ScoringParameter: KeyProfileName:} tollfree-route-adv:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:https://prod046-tollfree.poc.rbbnidhub.com/tollfree/v1/route Headers:[{Name:Authorization Value:}] Timeout:1000} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:resporg Value:true}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description:Returns tollfree routing information that does not include responsible organization; Limited to those participating with Ribbon in POC testing Sku:TFREE2 AttributesForKeys:[] ScoringParameter: KeyProfileName:} tollfree-route-test:{Name: Type:external Datastore: Tn: Modelname: Preconditions:[] Connection:{URL:https://prod046-tollfree.poc.rbbnidhub.com/tollfree/v1/route Headers:[{Name:Authorization Value:}] Timeout:1000} PreInvProc:{Composer:{Body:{Baseformat: Methods:[]} Headers:[] QueryParams:[{Name:test Value:true}] URLSuffix:{Value:}} Extractors:[]} PostInvProc:{Extractors:[]} Features:[] Description: Sku: AttributesForKeys:[] ScoringParameter: KeyProfileName:}]","errorType":"errorString"}